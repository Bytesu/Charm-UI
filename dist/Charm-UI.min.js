var AddressList=React.createClass({displayName:"AddressList",getInitialState:function(){return{nowAddress:this.props.localAddress,isWrapShow:!1,isSecondShow:!1}},getDefaultProps:function(){return{localAddress:"西安"}},secondAddressData:{},handleBtnClick:function(){this.state.isWrapShow?this.setState({isWrapShow:!1}):(this.setState({isWrapShow:!0}),this.setState({isSecondShow:!1}))},handleSelectAddress:function(t,e,s){if(this.setState({nowAddress:t}),e){var a=this.props.addressData[e],i=a[s],r=0;for(var n in i)r++;return r?(this.setState({isSecondShow:!0}),void(this.secondAddressData=i)):void this.setState({isWrapShow:!1})}this.setState({isWrapShow:!1})},render:function(){return React.createElement("div",{className:"AddressList"},React.createElement(AddressDropButton,{triangleState:this.state.isWrapShow,onClick:this.handleBtnClick},this.state.nowAddress),this.state.isWrapShow?React.createElement(AddressWrap,{addressData:this.props.addressData,localAddress:this.props.localAddress,handleSelectAddress:this.handleSelectAddress,secondAddressData:this.secondAddressData,isSecondShow:this.state.isSecondShow}):null)}}),AddressDropButton=React.createClass({displayName:"AddressDropButton",getInitialState:function(){return{}},getDefaultProps:function(){return{}},handleClick:function(){this.props.onClick()},render:function(){return React.createElement("button",{className:"AddressDropButton",onClick:this.handleClick},this.props.children,React.createElement("span",{className:"triangle "+this.props.triangleState}))}}),AddressWrap=React.createClass({displayName:"AddressWrap",getInitialState:function(){return{}},getDefaultProps:function(){return{}},render:function(){return this.props.isSecondShow?React.createElement("div",{className:"AddressWrap"},React.createElement(AddressSecondWrap,{secondAddressData:this.props.secondAddressData})):React.createElement("div",{className:"AddressWrap"},React.createElement(AddressLocation,{localAddress:this.props.localAddress,handleSelectAddress:this.props.handleSelectAddress}),React.createElement(AddressSearchInput,{handleSelectAddress:this.props.handleSelectAddress}),React.createElement(AddressListWrap,{addressData:this.props.addressData,handleSelectAddress:this.props.handleSelectAddress}))}}),AddressLocation=React.createClass({displayName:"AddressLocation",getInitialState:function(){return{}},getDefaultProps:function(){return{}},handleClick:function(){this.props.handleSelectAddress(this.props.localAddress)},render:function(){return React.createElement("div",null,"猜你在：",React.createElement("span",{onClick:this.handleClick},this.props.localAddress))}}),AddressSearchInput=React.createClass({displayName:"AddressSearchInput",getInitialState:function(){return{}},getDefaultProps:function(){return{}},handleSearch:function(t){var e=t.target.value;console.log(e)},render:function(){return React.createElement("div",{className:"AddressSearch"},"搜索：",React.createElement("input",{onChange:this.handleSearch}))}}),AddressListWrap=React.createClass({displayName:"AddressListWrap",getInitialState:function(){return{}},getDefaultProps:function(){return{}},render:function(){var t=this.props.addressData,e=this.props.handleSelectAddress,s=function(t){var s=[],a=0;for(var i in t)s[a]=React.createElement(AddressListRow,{keyData:i,data:t[i],handleSelectAddress:e}),a++;return s}(t);return React.createElement("div",{className:"AddressListWrap"},s)}}),AddressListRow=React.createClass({displayName:"AddressListRow",getInitialState:function(){return{}},getDefaultProps:function(){return{}},handleClick:function(t){var e=this.props.keyData,s=t.target.getAttribute("data"),a=t.target.innerHTML;this.props.handleSelectAddress(a,e,s)},render:function(){var t=this.handleClick,e=function(e){var s=[],a=0;for(var i in e)s[a]=React.createElement("span",null,React.createElement("span",{data:i,key:a,onClick:t},i)),a++;return s}(this.props.data);return React.createElement("div",{className:"AddressListRow"},React.createElement("span",{className:"keyData"},this.props.keyData),React.createElement("span",{className:"dataWrap"},e))}}),AddressSecondWrap=React.createClass({displayName:"AddressSecondWrap",getInitialState:function(){return{}},getDefaultProps:function(){return{}},render:function(){var t=this.props.secondAddressData,e=function(t){var e=[],s=0;for(var a in t)e[s]=React.createElement(AddressSecondRow,{keyData:a,data:t[a]}),s++;return e}(t);return React.createElement("div",{className:"AddressSecondWrap"},e)}}),AddressSecondRow=React.createClass({displayName:"AddressSecondRow",getInitialState:function(){return{}},getDefaultProps:function(){return{}},render:function(){var t=function(t){var e=[],s=0;for(var a in t)e[s]=React.createElement("span",null,React.createElement("a",{data:a,key:s,href:t[a]},a)),s++;return e}(this.props.data);return React.createElement("div",{className:"AddressListRow"},React.createElement("span",{className:"keyData"},this.props.keyData),React.createElement("span",{className:"dataWrap"},t))}}),ScrollBar=React.createClass({displayName:"ScrollBar",getInitialState:function(){return{}},getDefaultProps:function(){return{}},render:function(){return React.createElement("div",null)}}),AddressPicker=React.createClass({displayName:"AddressPicker",getInitialState:function(){return{city:"西安",address:null}},getDefaultProps:function(){return{}},setAddress:function(t){this.setState({address:t})},setCity:function(t){this.setState({city:t})},render:function(){var t=this.state.address?this.props.addressPickerActiveStyle:{};return console.log(t),React.createElement("div",{className:"address-picker",style:t},React.createElement(AddressList,{localAddress:this.state.city}),React.createElement(AddressInput,{city:this.state.city,searchSubmitHandler:this.setAddress}),this.state.address?React.createElement(AddressMap,{addressKeyword:this.state.address,city:this.props.city}):null)}}),AddressSearch=React.createClass({displayName:"AddressSearch",getInitialState:function(){return{address:null}},getDefaultProps:function(){return{inputWidth:400,inputTip:"输入想要搜索的地址",searchBtnText:"搜索",city:"西安"}},setAddress:function(t){this.setState({address:t})},render:function(){({width:this.props.searchInput});return React.createElement("div",{className:"address-search"},React.createElement(AddressInput,{city:this.props.city,inputTip:this.props.inputTip,inputWidth:this.props.inputWidth,searchBtnText:this.props.searchBtnText,searchSubmitHandler:this.setAddress}),this.state.address?React.createElement(AddressMap,{addressKeyword:this.state.address,city:this.props.city}):null)}}),AddressInput=React.createClass({displayName:"AddressInput",getInitialState:function(){return{keyword:null}},getDefaultProps:function(){return{inputWidth:400,inputTip:"输入想要搜索的地址",searchBtnText:"搜索",city:"西安"}},searchSubmit:function(){this.props.searchSubmitHandler(this.state.keyword)},keywordChange:function(t){this.setState({keyword:t.target.value})},checkEnter:function(t){13===t.keyCode&&this.searchSubmit()},componentDidMount:function(){new BMap.Autocomplete({input:"_addressSearchKeyword",location:this.props.city})},render:function(){var t={width:this.props.inputWidth};return React.createElement("div",{className:"address-input"},React.createElement("input",{className:"input-keyword",id:"_addressSearchKeyword",onChange:this.keywordChange,onKeyUp:this.checkEnter,placeholder:this.props.inputTip,style:t}),React.createElement("button",{className:"input-commit",onClick:this.searchSubmit},this.props.searchBtnText))}}),AddressMap=React.createClass({displayName:"AddressMap",getInitialState:function(){return{mapLocalObj:null,itemsNumber:0}},getDefaultProps:function(){return{}},componentDidMount:function(){var t=new BMap.Map("_addressMapMain");t.centerAndZoom(this.props.city);var e=new BMap.LocalSearch(t,{renderOptions:{map:t,panel:"_addressMapItems"},onSearchComplete:function(t){console.log(t.getNumPois())}.bind(this)});this.setState({mapLocalObj:e})},render:function(){return this.state.mapLocalObj&&this.state.mapLocalObj.search(this.props.addressKeyword),React.createElement("div",{className:"address-map"},React.createElement("div",{className:"map-nav"},React.createElement("div",{className:"map-nav-title"},"找到",React.createElement("span",{className:"map-nav-number"},this.state.itemsNumber),"家体验店"),React.createElement("div",{className:"map-items",id:"_addressMapItems"})),React.createElement("div",{className:"map-main",id:"_addressMapMain"}))}}),Spinner=React.createClass({displayName:"Spinner",render:function(){return React.createElement("div",{className:"cu-spinner"})}}),ProgressBar=React.createClass({displayName:"ProgressBar",getInitialState:function(){return{rate:null,done:!1}},getDefaultProps:function(){return{speed:.6,spinner:!0,easing:"ease",maxRate:.96,incStep:.04,minStep:.005,maxStep:.03,trickle:!0,trickleSpeed:800,setTrickle:!1}},start:function(){this._init(),this.set("0.5%"),this.props.trickle&&this._autoInc()},set:function(t,e){!e&&this._init(),t=this._format(t),100===t?this.setState({rate:100}):(t=t>100*this.props.maxRate?100*this.props.maxRate:t,this.setState({rate:t}))},inc:function(t){this._init(),this.props.trickle&&this._autoInc(),t=t?this._format(t):100*this.props.incStep;var e=this.state.rate+t;this.set(e+"%",!0)},done:function(){this.set("100%"),setTimeout(function(){this.setState({done:!0}),setTimeout(function(){this.setState({rate:null})}.bind(this),2*this.props.speed*1e3)}.bind(this),1e3*this.props.speed)},_format:function(t){return"number"==typeof t?t>1?100*this.pros.maxRate:100*t:"string"==typeof t?parseFloat(t)>100?100*this.props.maxRate:parseFloat(t):void 0},_init:function(){this.state.done&&this.setState({done:!1}),this.timer&&this._clearInterval()},_autoInc:function(){var t,e;this.timer=setInterval(function(){return e=this._getRadomStep(),t=this.state.rate+e,console.log(e),t>100*this.props.maxRate?(console.log(100*this.props.maxRate),void this._clearInterval()):(console.log(t),void this.set(t+"%",!0))}.bind(this),this.props.trickleSpeed)},_clearInterval:function(){this.timer&&clearInterval(this.timer)},_getRadomStep:function(t,e){return t=t||100*this.props.minStep,e=e||100*this.props.maxStep,Math.random()*(e-t)+t},render:function(){var t={opacity:this.state.done?0:1,transition:"opacity "+2*this.props.speed+"s "+this.props.easing},e={width:this.state.rate?this.state.rate+"%":0,transition:"width "+this.props.speed+"s "+this.props.easing};return this.state.rate?React.createElement("div",{className:"cu-progress",style:t},React.createElement("div",{className:"cu-progress-bar",style:e}),this.props.spinner?React.createElement(Spinner,null):null):null}}),ToolTip=React.createClass({displayName:"ToolTip",getDefaultProps:function(){return{tip:"tip",trigger:"hover",delay:0,hoverable:!1,position:"tip",width:"200px",type:"span",aHref:"#"}},getInitialState:function(){return{position:this.props.position,isActive:!1,isOnTip:!1,tipHeight:""}},handleMouseOver:function(t){"hover"==this.props.trigger&&this.setState({isActive:!0})},handleMouseOut:function(t){"hover"==this.props.trigger&&setTimeout(function(){return this.state.isOnTip?!1:void this.setState({isActive:!1})}.bind(this),this.props.delay)},handleClick:function(t){"click"==this.props.trigger&&(this.state.isActive?this.setState({isActive:!1}):this.state.isActive||this.setState({isActive:!0}))},handleTipMouseOver:function(t){this.props.hoverable&&(this.setState({isOnTip:!0}),this.setState({isActive:!0}))},handleTipMouseOut:function(t){this.props.hoverable&&(this.setState({isOnTip:!1}),this.setState({isActive:!1}))},componentDidUpdate:function(){this.setTipPosition()},setTipPosition:function(){var t=this.refs.tip.getDOMNode(),e=this.refs.cont.getDOMNode();this.flag||(this.state.tipHeight=t.offsetHeight,this.flag=1);var s=t.offsetWidth,a=t.offsetHeight,i=e.offsetWidth,r=e.offsetHeight;switch(this.state.position){case"left":t.style.top=-(a-r)/2+"px",t.style.left=-(s+20)+"px";break;case"right":t.style.top=-(a-r)/2+"px",t.style.left="100%";break;case"top":t.style.left=-(s-i)/2+"px",t.style.bottom="100%";break;case"bottom":t.style.left=-(s-i)/2+"px",t.style.top="100%";break;default:t.style.top=-(a-r)/2+"px",t.style.left=-(s+20)+"px"}t.style.height=this.state.tipHeight-20+"px",this.prevertTipOverflow()},prevertTipOverflow:function(){var t=this.refs.tip.getDOMNode().getBoundingClientRect().left,e=(this.refs.tip.getDOMNode().getBoundingClientRect().top,this.refs.tip.getDOMNode().offsetWidth),s=(this.refs.tip.getDOMNode().offsetHeight,parseInt(document.body.clientWidth));if(0>t&&t+e>s)return!0;if(0>t){if("left"==this.state.position)return void this.setState({position:"top"});if("top"==this.state.position||"bottom"==this.state.position)return void this.setState({position:"right"})}if(t+e>s){if("right"==this.state.position)return void this.setState({position:"bottom"});if("bottom"==this.state.position||"top"==this.state.position)return void this.setState({position:"left"})}},getTipStyle:function(){return{display:this.state.isActive?"block":"none",color:"pink",backgroundColor:"#333",width:this.props.width}},render:function(){return"span"==this.props.type?React.createElement("span",{className:"tooltip "+this.state.position},React.createElement("span",{ref:"cont",onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut,onClick:this.handleClick},this.props.children),React.createElement("div",{onMouseOver:this.handleTipMouseOver,onMouseOut:this.handleTipMouseOut,className:"tip",ref:"tip",style:this.getTipStyle()},this.props.tip)):"a"==this.props.type?React.createElement("span",{className:"tooltip "+this.state.position},React.createElement("a",{href:this.props.aHref,ref:"cont",onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut,onClick:this.handleClick},this.props.children),React.createElement("div",{onMouseOver:this.handleTipMouseOver,onMouseOut:this.handleTipMouseOut,className:"tip",ref:"tip",style:this.getTipStyle()},this.props.tip)):"button"==this.props.type?React.createElement("span",{className:"tooltip "+this.state.position},React.createElement("button",{ref:"cont",onMouseOver:this.handleMouseOver,onMouseOut:this.handleMouseOut,onClick:this.handleClick},this.props.children),React.createElement("div",{onMouseOver:this.handleTipMouseOver,onMouseOut:this.handleTipMouseOut,className:"tip",ref:"tip",style:this.getTipStyle()},this.props.tip)):void 0}});
//# sourceMappingURL=data:application/json;base64,